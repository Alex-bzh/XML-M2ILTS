---
title: "L’API DOM pour XML"
title-slide-attributes:
  data-background-color: "#002f2f"
author: "Alexandre Roulois (Université Paris-Cité, IRIF, CNRS)"
format:
  revealjs:
    slide-number: true
    show-slide-number: all
    smaller: true
    scrollable: true
    theme: showcase.scss
---

## Présentation

:::: {.columns}

::: {.column width="50%"}
**API :** Application Program Interface

**DOM :** Document Object Model

**API DOM :** interface de programmation W3C

**1er octobre 1998 :** DOM 1 (norme)

**13 novembre 2000 :** DOM 2 (norme)

**7 avril 2004 :** DOM 3 (norme)

**19 novembre 2015 :** DOM 4 (norme)
:::

::: {.column width="50%"}

- représenter un document sous forme structurée
- indépendante des langages de programmation
- méthodes et propriétés pour accès en lecture et écriture

![Représentation d’un fichier XML grâce à l’API DOM](./figs/api_dom.png)
:::

::::

## Relation avec la théorie des graphes

:::: {.columns}

::: {.column width="50%"}
Représentation similaire à un graphe connexe et incomplet :

- **connexe :** un chemin unique relie tous les sommets
- **incomplet :** tous les sommets ne se rejoignent pas entre eux
- présence d’un nœud racine
- notion de hiérarchie

Navigation dans l’arbre par chemin **absolu** ou **relatif**
:::

::: {.column width="50%"}
```{mermaid}
flowchart TB
  1((1)):::parent --- 2((2)):::child --- 5((5)):::child --- 9((9)):::child
  1 --- 3((3)):::child
  1 --- 4((4)):::child --- 7((7)):::child --- 11((11)):::child
  2 --- 6((6)):::child
  4 --- 8((8)):::child
  5 --- 10((10)):::child
  7 --- 12((12)):::child

  classDef parent fill:#f96,stroke:white,color:white
  classDef child fill:white,stroke:#f96
```

Exemple de navigation vers le nœud 8 :

- **chemin absolu :** 1 --> 4 --> 8
- **chemins relatifs :** (extrait)
  - 5 --> 2 --> 1 --> 4 --> 8
  - 7 --> 4 --> 8
  - 3 --> 1 --> 4 --> 8
  - …
:::

::::

## Modélisation d’un document XML

:::: {.columns}

::: {.column width="50%"}
Élément racine `book` dispose de trois éléments enfants :

- `author`
- `title`
- `pubDate`

Élément `pubDate` dispose de deux enfants :

- attribut `iso`
- texte `14 novembre 1851`

Attribut `iso` dispose d’un enfant :

- `14 novembre 1851`
:::

::: {.column width="50%"}
```xml
<?xml version="1.0" encoding="utf-8"?>
<book>
  <author>
    <firstname>Herman</firstname>
    <lastname>Melville</lastname>
  </author>
  <title>Moby Dick</title>
  <pubDate iso="1851-11-14">14 novembre 1851</pubDate>
</book>
```

```{mermaid}
flowchart TB
  book:::element --- author:::element
  book --- title:::element
  book --- pubDate:::element
  author --- firstname:::element
  author --- lastname:::element
  firstname --- Herman
  lastname --- Melville
  title --- t["Moby Dick"]
  pubDate --- iso:::attribute --- i["1851-11-14"]
  pubDate --- d["14 novembre 1851"]

  classDef element fill:#f96,stroke:white,color:white
  classDef attribute fill:white,stroke:#f96

```
:::

::::

## Classes de l’API

::::{.columns}

::: {.column width="50%"}
### Classe *Document*

Donne accès :

- au prologue
- au corps du document

Méthodes pour créer des éléments, des attributs, des commentaires…

### Classe *Node*

Tout est nœud : élément, attribut, texte…

Classe fournit informations :

- type de nœud (attribut, élément, valeur)
- nom du nœud
- liste des nœuds enfants
- accès au nœud parent

Méthodes pour agir sur nœud (supprimer, remplacer…)
:::

::: {.column width="50%"}
### Autres classes

Trois autres classes essentielles :

- *Element*
- *Attr* (attribut)
- *Text*

Toutes disposent de propriétés pour accéder à des informations (nœud, valeur…)

Et de méthodes pour agir sur elles :

- liste des éléments du même nom
- modifier la valeur
- remplacer du contenu
- …

D’autres classes existent, consulter [la documentation](https://www.w3.org/TR/dom/){target="_blank"}
:::

::::

## Analyse syntaxique

::::{.columns}

::: {.column width="50%"}
API DOM est un *parser* XML qui fournit :

- modélisation arborescente du document XML
- classes pour accès lecture/écriture

DOM est implémenté par les navigateurs Web
:::

::: {.column width="50%"}
Langages informatiques implémentent plusieurs parsers avec des objectifs différents :

- JavaScript (*DOMParser*, *jQuery.ParseXML*)
- PHP (*DOM*, *XMLReader*, *libxml*, *SDO*, *SimpleXML*)
- Python (*ElementTree*, *lxml*, *cElementTree*, *minidom*)
:::

::::
