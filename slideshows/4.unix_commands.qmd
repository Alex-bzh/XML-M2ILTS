---
title: "Introduction aux commandes Unix"
title-slide-attributes:
  data-background-color: "#002f2f"
author: "Alexandre Roulois (Université Paris-Cité, IRIF, CNRS)"
format:
  pdf:
    toc: true
  revealjs:
    slide-number: true
    show-slide-number: all
    smaller: true
    scrollable: true
    theme: showcase.scss
---

## Présentation

- Communiquer plus directement avec le système
- Résoudre rapidement des tâches simples et essentielles
- Évite la multiplication des logiciels gourmands en ressources

:::: {.columns}

::: {.column width="50%"}
### Ce qu’il est inutile de savoir

- **UNIX :** famille de systèmes d’exploitation
- issu de recherches menées par Kenneth Thompson
- Linux est de type UNIX
- Mac OS dérivé de UNIX (BSD)

:::

::: {.column width="50%"}
### Ce qu’il est utile de savoir

- repose sur un interpréteur (*shell*)
- dispose de petits utilitaires appelés en ligne de commande
- ligne de commande débute par une invite (*prompt*) : `$` ou `#` en mode superutilisateur
- syntaxe de l’appel d’une commande :
```bash
# command [-options] [arguments]
ls -l ./data/XML/book_of_secrets.xml
```
:::

::::

## Commandes usuelles

Agir sur des fichiers et des répertories impose de bien se repérer dans son arborescence !

:::{.text-center}
```{mermaid}
graph TD;
  root(/):::folder
  root --> etc:::folder
  root --> var:::folder
  root --> usr:::folder
  root -->|/home| home:::folder

  home -->|/home/username| username:::folder

  username --> Desktop:::folder
  username -->|/home/username/Documents| Documents:::folder
  username --> Downloads:::folder
  username --> Pictures:::folder
  username --> Videos:::folder
  username --> Music:::folder

  Documents --> book_of_secrets.odt:::file
  Documents -->|/home/username/Documents/book_of_secrets.xml| book_of_secrets.xml:::file

  classDef folder fill:#f96,stroke:white,color:white
  classDef file fill:white,stroke:#f96
```
:::

---

### Se déplacer dans un système

:::: {.columns}

::: {.column width="50%"}
- `pwd` (*print working directory*) pour connaître le chemin absolu vers le répertoire de travail
- `ls` (*listing*) pour lister les répertoires et fichiers du répertoire de travail
- `cd` (*change directory*) pour changer de répertoire de travail

```bash
# /home/jovyan
pwd
# apt.txt  data  LICENSE  README.md  slideshows
ls
# move into 'slideshows' folder from the working directory
cd ./slideshows
```
:::

::: {.column width="50%"}
#### Focus

Expression `cd ./slideshows` :

- appel à la commande `cd`
- transmission du paramètre  
`./slideshows`

#### Effets

- répertoire de travail devient `slideshows`
- appel à la commande `pwd` renvoie :  
`/home/jovyan/slideshows`
:::

::::

:::{.callout-tip title="Paramètres spéciaux"}
- `/` : depuis la racine du système
- `./` : depuis le répertoire de travail
- `../` : remonter dans le répertoire parent
- `~/` : depuis le *home* de l’utilisateur
:::

---

### Opérations sur des fichiers ou des répertoires

:::: {.columns}

::: {.column width="50%"}
#### Opérations courantes

- `touch` : crée un fichier
- `mv` : renomme un fichier
- `rm` : supprime un fichier
- `cp` : copie un fichier

:::{.callout-tip title="Astuce"}
Option `-r` (*recursive*) avec les commandes `cp` et `rm` pour agir sur un répertoire.
:::

#### Opérations spécifiques aux répertoires

- `mkdir` : crée un répertoire
- `rmdir` : supprime un répertoire
:::

::: {.column width="50%"}
#### Opérations spécifiques aux fichiers textes

- `cat` : concatène des fichiers pour affichage
- `less` : ouvre un fichier pour affichage
- `more` : ouvre un fichier pour affichage
- `head` : affiche les dix premières lignes d’un fichier
- `tail` : affiche les dix dernières lignes d’un fichier
- `grep` : recherche de motifs
:::

::::

---

### Obtenir de l’aide sur une commande

Plusieurs moyens pour obtenir de l’aide sur un terminal :

- option `-h` avec quelques commandes
- commande `man` avec le nom de la commande comme paramètre

```bash
# print the manuel for the 'ls' command
man ls
```

Site [TLDR](https://tldr.inbrowser.app/){target="_blank"} (*too long didn't read*)


## Enchaîner des instructions

::::: {.columns}

:::: {.column width="50%"}
Parmi les manières d’enchaîner des instructions :

- opérateur `;` pour tout exécuter en même temps
- opérateur `&&` pour exécuter une commande seulement si les précédentes ont réussi
- opérateur `|` pour envoyer à une commande le résultat des précédentes
::::

:::: {.column width="50%"}
### Exemples

```bash
# list home directory
ls ~/

# list home directory and search for files with .txt extension
ls ~/ | grep ".txt"

# whether or not TXT files exists in home dir, create a results.txt file
ls ~/ | grep ".txt" ; touch ~/results.txt

# print a message only if there are TXT files in home dir
ls ~/ | grep ".txt" && echo "Il y a des fichiers TXT ici !"

# print the message in a 'results.txt' only if there are TXT files in home dir
ls ~/ | grep ".txt" && touch ~/results.txt && echo "Il y a des fichiers TXT ici !" > ~/results.txt
```

:::{.callout-note title="Remarque"}
Lorsque l’on tente d’exécuter une action complexe en enchaînant plusieurs commandes, on obtient des *one-liners*.
:::

::::

:::::

## Les flux de redirection

Une commande tapée affiche un résultat dans la console. Pour envoyer le résultat ailleurs, il faut utiliser les flux de redirection :

- `>` pour remplacer le contenu d’un fichier par le résultat d’une commande
- `>>` pour ajouter à un fichier le résultat d’une commande
- `<` pour lire depuis un fichier
- `<<` pour lire depuis le clavier

---

### Les flux d’entrée/sortie

:::: {.columns}

::: {.column width="50%"}
- Toute commande saisie au clavier (p. ex. `cat`) transite via l’entrée standard (*standard input* ou *stdin*) qui est perçue par le *shell* comme un fichier à accès séquentiel.
- Le résultat de la commande est alors dirigé soit vers la sortie standard (*standard output* ou *stdout*) en cas de succès, soit vers la sortie d’erreur standard (*standard error* ou *stderr*).

Il est possible de rediriger ces entrées et sorties.

:::

::: {.column .text-center width="50%"}
![Les flux I/O](./figs/streams.png)
:::

::::

---

::::{.columns}

::: {.column width="50%"}
### Remplacer le contenu d’un fichier

Flux de redirection `>` pour rediriger *stdout* vers un fichier

- si le fichier existe déjà, il est écrasé
- autrement, il est créé

```bash
# create a file hello.txt in home dir
echo 'Hello World!' > ~/hello.txt
```
:::

::: {.column width="50%"}
### Ajouter du contenu à la fin d’un fichier

Flux de redirection `>>` pour rediriger *stdout* vers un fichier

- si le fichier existe déjà, le contenu sera étendu
- autrement, il est créé

```bash
# append the message to the content of 'hello.txt'
echo 'This is a warm welcoming message' >> ~/hello.txt
```
:::

::::

---

### Lire depuis un fichier

Le flux de redirection `<` indique à la commande d’où provient l’entrée qu’on lui soumet.

```bash
# the content of the file is sent to the command
cat < ~/hello.txt
```

Il existe une différence notable de traitement entre cette syntaxe et celle liée à la commande `cat` elle-même :

```bash
# the parameter '~/hello.txt' tells to 'cat' where to find the file
cat ~/hello.txt
```

---

### Lire depuis le clavier

:::::{.columns}

::::{.column width="50%"}
Flux de redirection `<<` pour saisir des données depuis le clavier

Par exemple, pour trier des données :

```bash
# :q to exit
sort << :q
```
::::

::::{.column width="50%"}
:::{.callout-note title="Fonctionnement"}
1. saisie des données
2. saisie de la séquence de sortie (ici `:q`)
3. données envoyées à `sort`
4. `sort` trie les données
:::
::::

:::::

---

### Rediriger les erreurs

::::: {.columns}

:::: {.column width="60%"}
Plusieurs manières de rediriger les erreurs

Si une commande échoue, le résultat transite via *stderr* :

```bash
# cat: ./file_that_does_not_exist.txt: No such file or directory
cat ./file_that_does_not_exist.txt
```

Noté `2`, *stderr* peut être intercepté et redirigé par les opérateurs `2>` ou `2>>` :

```bash
# to keep track of errors
cat ./file_that_does_not_exist.txt 2>> ~/error.log
```

Dans la pratique, on peut tout rediriger vers *stdout* :

```bash
# if the file does not exist, it goes to stdout, which asks to put it in a file
cat ./file_that_probably_exists.txt > ~/copy.txt 2>&1
```

De manière réciproque, il est tout à fait envisageable de rediriger *stdout* vers *stderr* :

```bash
# message sent to stderr in spite of stdout
echo "An error occurred" 1>&2
```
::::

:::: {.column width="40%"}
::: {.callout-note title="Un trou noir dans le système"}
Dans tout système Linux, il existe un endroit particulier d’où rien ne peut ressortir : `/dev/null`.

```bash
# prevent 'ls' command from printing the result in stdout
ls ~/ | grep ".txt" > /dev/null && touch ~/results.txt && echo "Il y a des fichiers TXT ici !" > ~/results.txt
```

On se réfère à ce lieu pour éviter d’être systématiquement alerté, notamment dans le cas de commandes planifiées de manière récurrente.
:::
::::

:::::