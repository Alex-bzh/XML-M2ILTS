---
title: "La DTD ou comment donner du sens à un document XML"
title-slide-attributes:
  data-background-color: "#002f2f"
author: "Alexandre Roulois (Université Paris-Cité, IRIF, CNRS)"
format:
  pdf:
    toc: true
  revealjs:
    slide-number: true
    show-slide-number: all
    smaller: true
    scrollable: true
    theme: showcase.scss
---

## Présentation

:::: {.columns}

::: {.column width="50%"}
**DTD :** *Document Type Definition*

- Langage particulier, non-XML
- Méthode de contrôle des balises et attributs saisis
- Pour valider la grammaire d’un document XML
- Essentiel car XML est personnalisable
- Certaines grammaires font consensus (TEI, TMX…)

Commentaires identiques au format XML :

```xml
<!-- A comment is usually intended for a human agent -->
```
:::

::: {.column width="50%"}
### Modes de déclaration

#### Déclaration interne

```xml
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library [
    <!-- list of declarations for the grammar 'library' -->
]>
<library/>
```

#### Référence fichier externe

```xml
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library SYSTEM "/path/to/library.dtd">
```

DTD volumineuse ? Limiter son rôle à de la validation :

```xml
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE library SYSTEM "/path/to/library.dtd">
```
:::

::::

## Déclarer des éléments

Syntaxe générique d’une déclaration :

```dtd
<!ELEMENT name (model)>
```

Parenthèses mathématiques pour former des blocs :

```dtd
<!-- Either there are two child nodes in the parent node, or only a single one, named differently -->
<!ELEMENT parent_node
  (
    (first_born_node, second_born_node) | only_child_node
  )
```

Plusieurs modèles de contenu :

- Contenu d’élément
- Texte seul
- Contenu mixte
- Contenu vide
- Modèle de contenu quelconque

---

### Modèle de contenu d’éléments

L’élément décrit ne peut contenir que d’autres éléments

:::: {.columns}

::: {.column width="50%"}
```xml
<!-- XML tree -->
<book>
  <title>Moby Dick</title>
  <author>Herman Melville</author>
</book>
```
:::

::: {.column width="50%"}
```dtd
<!-- DTD declaration -->
<!ELEMENT book (title, author)>
```
:::

::::

Combiner des éléments avec des opérateurs logiques : `,` `|`

```dtd
<!-- no operator: title is mandatory -->
<!ELEMENT book (title)>
<!-- comma means title AND author are both mandatory -->
<!ELEMENT book (title, author)>
<!-- pipe operator means that, inside 'author', we find either a 'fullName' node OR a combinaison of 'firstName' and 'lastName' nodes -->
<!ELEMENT author (fullName | (firstName, lastName) )>
```

Déterminer le nombre d’apparitions d’un élément avec les quantificateurs : `?` `*` `+`

```dtd
<!-- optional quantifier: 'sumary' appears exactly 0 or 1 time -->
<!ELEMENT book (title, author, summary?)>
<!-- multiple optional quantifier: 'comment' node appears 0 or several times -->
<!ELEMENT book (title, author, summary?, comment*)>
<!-- mandatory quantifier: 'author' appears 1 or several times -->
<!ELEMENT book (title, author+, summary?, comment*)>
```

---

### Modèle de contenu textuel

- Pour autoriser du texte à l’intérieur d’un élément
- Déclaration avec l’expression `#PCDATA` :

:::: {.columns}

::: {.column width="50%"}
```dtd
<!ELEMENT title (#PCDATA)>
```
:::

::: {.column width="50%"}

```xml
<title>Moby Dick</title>
```
:::

::::

<br/>

### Modèle de contenu vide

- Élément vide (ou **autonome**) existe pour lui-même
- Ne contient ni texte ni élément enfant
- Est parfois accompagné d’attributs
- Déclaration avec l’expression `EMPTY` :

:::: {.columns}

::: {.column width="50%"}
```dtd
<!ELEMENT figure EMPTY>
```
:::

::: {.column width="50%"}

```xml
<figure/>
```
:::

::::

---

### Modèle de contenu mixte

- Déclaration souple, plus permissive
- À éviter le plus possible pour des raisons de performance et d’optimisation
- Présence obligatoire de l’expression `#PCDATA` en tête du modèle
- Opérateur logique `OU` entre chaque élément du modèle :

:::: {.columns}

::: {.column width="50%"}
```dtd
<!ELEMENT author (#PCDATA | lastName)*>
```
:::

::: {.column width="50%"}

```xml
<author>
  <!-- The text 'Herman' is not linked to any node -->
  Herman
  <lastName>Melville</lastName>
</author>
```
:::

::::

::::: {.callout-warning title="Attention"}
Ne pas confondre avec une utilisation de l’opérateur `OR` pour déclarer plusieurs options de modèles :

:::: {.columns}

::: {.column width="50%"}
```dtd
<!ELEMENT author (fullName | (firstName, lastName))>
```

Combinaison impossible du modèle mixte avec un groupe séquentiel :
```dtd
<!-- Not permitted -->
<!ELEMENT author (#PCDATA | (firstName, lastName))>
```
:::

::: {.column width="50%"}

```xml
<author>
  <fullName>Herman Melville</fullName>
</author>

<!-- OR -->

<author>
  <firstName>Herman</firstName>
  <lastName>Melville</lastName>
</author>
```
:::

::::

:::::

---

### Modèle de contenu quelconque

**À éviter !**

- Permet de tout faire sans contrôle
- Déclaration avec l’expression `ANY` :

```dtd
<!ELEMENT book ANY>
```

---

### Exemple de déclaration d’éléments

:::: {.columns}

::: {.column width="50%"}
```dtd
<!-- Root element -->
<!ELEMENT books (book+)>

<!-- A book -->
<!ELEMENT book (title, author)>

<!-- Elements of a book -->
<!ELEMENT title (#PCDATA)>
<!ELEMENT author (name | (firstName, lastName))>

<!-- Elements of an author -->
<!ELEMENT name (#PCDATA)>
<!ELEMENT firstName (#PCDATA)>
<!ELEMENT lastName (#PCDATA)>
```
:::

::: {.column width="50%"}
```xml
<books>
  <book>
    <title>Moby Dick</title>
    <author>
      <firstName>Herman</firstName>
      <lastName>Melville</lastName>
    </author>
  </book>
  <book>
    <title>Le vaillant petit tailleur</title>
    <author>
      <name>Les frères Grimm</name>
    </author>
  </book>
</books>
```
:::

::::

## Déclarer des attributs

**Rappels :**

- Attributs se placent dans la balise ouvrante d’un élément
- Se déclarent sous forme de paire `name="value"` :
```xml
<book author="Herman Melville" title="Moby Dick"/>
```

Déclaration d’attributs pour un élément donné :

```dtd
<!ATTLIST element attributeDefinition>
```

Définition de chaque attribut sous la forme : `attribute type tag`

```dtd
<!ELEMENT book EMPTY>
<!ATTLIST book
  author CDATA #REQUIRED
  title CDATA #REQUIRED>
```

---

### Type `CDATA`

- Pour simplement déclarer du texte à l’intérieur de l’attribut
- Type le plus courant
- Peut convenir à toutes les situations

:::: {.columns}

::: {.column width="50%"}
```dtd
<!ELEMENT book EMPTY>
<!ATTLIST book
  author CDATA #REQUIRED
  title CDATA #REQUIRED
  <!-- even if the date is standardized, attribute 'publication' can be declared as CDATA -->
  publication CDATA #REQUIRED>
```
:::

::: {.column width="50%"}

```xml
<book
  author="Herman Melville"
  title="Moby Dick"
  publication="1851-10-18"/>
```
:::

::::

---

### Type `ID`

:::: {.columns}

::: {.column width="60%"}
Pour déclarer un attribut comme étant un identifiant

Ajoute plusieurs contrôles :

- identifiant unique dans le document
- un seul attribut de type `ID` par élément
- nom XML valide

```dtd
<!ATTLIST book
  num ID #REQUIRED
  category CDATA #REQUIRED>
```
:::

::: {.column width="40%"}
#### Exemples illicites

Deux éléments ne peuvent partager le même identifiant :

```xml
<book num="_1"/>
<book num="_1"/>
```

Un élément ne peut contenir deux attributs de type `ID` :

```dtd
<!ATTLIST book
  num ID #REQUIRED
  b ID #REQUIRED>
```

La valeur d’un attribut `ID` ne peut être un nom XML invalide :

```xml
<!-- must begin with a letter or an underscore -->
<book num="1"/>
```
:::

::::

---

### Type `IDREF`

Pour faire référence à un attribut `ID` préalablement défini

:::: {.columns}

::: {.column width="50%"}
```dtd
<!ELEMENT book EMPTY>
<!ATTLIST book
  num ID #REQUIRED
  author IDREF #REQUIRED>

<!ELEMENT author EMPTY>
<!ATTLIST author
  ref ID #REQUIRED
  name CDATA #REQUIRED>
```
:::

::: {.column width="50%"}
```xml
<book num="_1" author="MEL"/>
<book num="_2" author="GRI"/>

<author ref="GRI" name="Les frères Grimm"/>
<author ref="MEL" name="Herman Melville"/>
```
:::

::::

---

### Type `IDREFS`

Pour faire référence à plusieurs attributs `ID` préalablement définis

:::: {.columns}

::: {.column width="50%"}
```dtd
<!ELEMENT book EMPTY>
<!ATTLIST book
  num ID #REQUIRED
  authors IDREFS #REQUIRED>

<!ELEMENT author EMPTY>
<!ATTLIST author
  ref ID #REQUIRED
  name CDATA #REQUIRED>
```
:::

::: {.column width="50%"}
```xml
<!-- correct even if there is only one author -->
<book num="_1" authors="MEL"/>

<!-- IDs are separated by a blank space -->
<book num="_2" authors="J_GRI W_GRI"/>

<author ref="J_GRI" name="Jacob Grimm"/>
<author ref="W_GRI" name="Wilhelm Grimm"/>
<author ref="MEL" name="Herman Melville"/>
```
:::

::::

---

### Contrôler les valeurs d’un attribut

Les étiquettes permettent d’exercer une forme de contrôle sur les valeurs des attributs :

- `#REQUIRED` : la présence de l’attribut est obligatoire
- `#IMPLIED` : la présence de l’attribut est facultative
- `#FIXED "value"` : si l’attribut est présent, sa valeur est forcément celle déclarée

#### Une liste contrôlée de valeurs

Il est possible de limiter les valeurs permises pour un attribut en listant ses options :

:::: {.columns}

::: {.column width="50%"}
```dtd
<!ELEMENT book EMPTY>
<!ATTLIST book
  genre (poem | novel | drama) "novel">
```
<hr/>
```dtd
<!ELEMENT book EMPTY>
<!ATTLIST book
  genre (poem | novel | drama) #REQUIRED>
```
<hr/>
```dtd
<!ELEMENT book EMPTY>
<!ATTLIST book
  genre (poem | novel | drama) #REQUIRED>
```
:::

::: {.column width="50%"}
```xml
<book genre="drama"/>
<!-- if absent, it means that the book is a novel -->
<book/>
```
<hr/>
```xml
<book genre="poem"/>
<!-- the attribute is not declared at all -->
<book/>
```
<hr/>
```xml
<book genre="poem"/>
<!-- this will provoke an error -->
<book/>
```
:::

::::

## Déclarer des entités

4 types d’entités :

- entités prédéfinies
- entités internes
- entités externes
- entités paramètres

Syntaxe pour appeler une entité : `&entity;`

Exemple :

```xml
<!-- entity 'amp' to register special character '&' -->
<author>Wilhelm &amp; Jacob Grimm</author>
```

---

### Les entités prédéfinies

|Nom de l’entité|Caractère|
|:-:|:-:|
|`&lt;`|`<`|
|`&gt;`|`>`|
|`&amp;`|`&`|
|`&apos;`|`'`|
|`&quot;`|`"`|

Correspondances Unicode reconnues :

- décimale : `&#…;`
- hexadécimale : `&#x…;`

---

### Les entités internes


- Permet de stocker une information récurrente
- Entité `=` référence ou alias vers une information
- À définir avec le mot-clé `!ENTITY` :
```dtd
<!-- 'melville' is the name of the entity -->
<!ENTITY melville "Herman Melville">
```
- Appel avec la syntaxe générique :
```xml
<author>&melville;</author>
```
- Une entité peut référencer un fragment XML :

:::: {.columns}

::: {.column width="50%"}
```dtd
<!ENTITY melville
  "<firstName>Herman</firstName>
  <lastName>Melville</lastName>"
>
```
:::

::: {.column width="50%"}
```xml
<!-- this will put the XML structure inside the tags -->
<author>&melville;</author>

<!-- Like this:
<author>
  <firstName>Herman</firstName>
  <lastName>Melville</lastName>
</author>
-->
```
:::

::::

---

### Les entités externes

Une entité peut faire référence à une ressource externe :

```dtd
<!-- the content of entity 'melville' is in another file -->
<!ENTITY melville SYSTEM "melville.xml">
```

La ressource est un fichier XML valide :

```xml
<!-- file 'melville.xml' -->
<author>
  <firstName>Herman</firstName>
  <lastName>Melville</lastName>
</author>
```

La référence à l’entité reste identique :

```xml
<book>
  <title>Moby Dick</title>
  &melville;
</book>
```

---

### Les entités paramètres

Elles font cette fois-ci référence à un fragment DTD plutôt qu’à un fragment XML

Syntaxe de la déclaration avec le symbole `%` :

```dtd
<!ENTITY % identity
  "<!ELEMENT firstName (#PCDATA)>
  <!ELEMENT lastName (#PCDATA)>"
>
```

La référence à l’entité paramètre utilise également le symbole `%` :

```dtd
<!ELEMENT author (firstName, lastName)>
  %identity;
```

**Attention !** Bien déclarer l’entité avant de l’appeler

## Un exemple

:::: {.columns}

:::{.column width="50%"}
```dtd
<!-- ENTITIES -->
<!ENTITY grimms SYSTEM "grimms.xml">

<!-- Root element -->
<!ELEMENT library (books, authors)>

<!-- Books section -->
<!ELEMENT books (book+)>

  <!-- One book -->
  <!ELEMENT book (title)>
  <!ATTLIST book
    n ID #REQUIRED
    authors IDREFS #REQUIRED
    genre (novel | play | tale) "novel">

  <!-- Title of a book -->
  <!ELEMENT title (#PCDATA)>

<!-- Authors section -->
<!ELEMENT authors (author+)>

  <!-- One author -->
  <!ELEMENT author (firstName, lastName)>
  <!ATTLIST author
    ref ID #REQUIRED>
  
  <!-- Elements in an author -->
  <!ELEMENT firstName (#PCDATA)>
  <!ELEMENT lastName (#PCDATA)>

```

Entité externe *grimms.xml* :

```xml
<author ref="J_GRI">
  <firstName>Jacob</firstName>
  <lastName>Grimm</lastName>
</author>
<author ref="W_GRI">
  <firstName>Wilhelm</firstName>
  <lastName>Grimm</lastName>
</author>
```
:::

:::{.column width="50%"}
```xml
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library SYSTEM "library.dtd">
<library>
  <books>
    <book n="_1" authors="MEL" genre="novel">
      <title>Moby Dick</title>
    </book>
    <book n="_2" authors="W_GRI J_GRI" genre="tale">
      <title>Le vaillant petit tailleur</title>
    </book>
  </books>
  <authors>
    <author ref="MEL">
      <firstName>Herman</firstName>
      <lastName>Melville</lastName>
    </author>
    &grimms;
  </authors>
</library>
```
:::

::::
