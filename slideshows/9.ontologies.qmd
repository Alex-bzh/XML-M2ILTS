---
title: "Introduction aux ontologies"
title-slide-attributes:
  data-background-color: "#002f2f"
author: "Alexandre Roulois (Université Paris-Cité, IRIF, CNRS)"
format:
  pdf:
    toc: true
  revealjs:
    slide-number: true
    show-slide-number: all
    smaller: true
    scrollable: true
    theme: showcase.scss
---

## Du discours sur l’être à la représentation du monde

**Philosophie :** étude de l’être en tant qu’étant.

**Sciences de l’information :** modéliser les connaissances d’un domaine spécifique en reliant ses concepts entre eux.

::: {.text-center}
```{mermaid}
flowchart LR
  A(Monde organisé):::tag
  B(hypothèses raisonnables):::text
  C(compréhensible par tous):::text

  A -- discours rationnel --> B
  A -- vision partagée --> C

  classDef tag fill:#f96,stroke:white
  classDef text fill:white,stroke:#f96
```
:::

:::: {.columns}

::: {.column}
Taxinomie sous forme de classes pour penser le particulier sous le général.

Modèle de graphes conceptuels pour affirmer la subsomption des classe.
:::

::: {.column}
::: {.text-center}
```{mermaid}
graph TD
  NaineRouge["Red Dwarf"] ---> B["Star"]:::text
  GeanteBleue["Giant Blue"] ---> B
  NaineBlanche["White Dwarf"] ---> B

  Tellurique["Terrestrial Planet"] ---> C["Planet"]:::text
  GeanteGazeuse["Gas Giant"] ---> C

  B ---> A["Celestial Body"]:::tag
  C ---> A

  classDef tag fill:#f96,stroke:white
  classDef text fill:white,stroke:#f96
```
:::
:::

::::

::: {.notes}
Même s’il fait référence à un domaine de réflexion remontant aux origines de la philosophie, le concept d’ontologie n’a été composé que récemment, au XVIIe siècle, à partir de deux termes issus du grec ancien *ὤν* (*ôn*, *ontos*) et *λόγος* (*logos*).

En suivant la tradition aristotélicienne, l’ontologie serait la branche de la métaphysique qui étudie l’être en tant qu’être, une métaphysique générale à dissocier de la métaphysique spéciale qui traite de l’attribut de parties de l’être (l’âme, le monde, Dieu…).

En sciences de l’information, les ontologies s’attachent à modéliser les connaissances d’un domaine spécifique en reliant ses concepts entre eux.

Du point de vue humain, le monde paraît organisé, de telle manière qu’il permet de tenir un discours rationnel qui lui-même nous autorise à émettre des hypothèses raisonnables. Et si l’on se comprend, c’est parce que tous les humains partagent cette ontologie.
:::

## Un vocabulaire pour les modèles RDF

**RDFS** : *Resource Description Framework Schema*

**10 février 2004 :** recommandation W3C

- schéma pour documenter le vocabulaire utilisé dans les graphes RDF pour décrire les ressources autour de nous
- pour décrire des ontologies légères à échanger sur le Web
- écrit en RDF
- interrogeable en SPARQL
- espaces de nommages pour associer un vocabulaire à un modèle RDF

```xml
<?xml version="1.0"?>
<rdf:RDF xml:base="http://example.org/astronomy#"
         xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#">

  <!-- Class description -->

</rdf:RDF>
```

## Définition de la hiérarchie des classes

Deux méthodes principales pour modéliser la hiérarchie des classes :

- `rdfs:class` : déclare une ressource comme une classe pour d’autres ressources
- `rdfs:subClassOf` : déclare la classe comme particulière pour une classe générale

:::: {.columns}

::: {.column}
```xml
<!-- Schema -->
<?xml version="1.0"?>
<rdf:RDF xml:base="http://example.org/astronomy#"
         xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#">

  <!-- Generic class -->
  <rdfs:Class rdf:about="CelestialBody">
    <rdfs:label>Celestial Body</rdfs:label>
  </rdfs:Class>

  <!-- Subclass Star -->
  <rdfs:Class rdf:about="Star">
    <rdfs:label>Star</rdfs:label>
    <rdfs:subClassOf rdf:resource="CelestialBody"/>
  </rdfs:Class>

  <!-- Subclass Planet -->
  <rdfs:Class rdf:about="Planet">
    <rdfs:label>Planet</rdfs:label>
    <rdfs:subClassOf rdf:resource="CelestialBody"/>
  </rdfs:Class>

</rdf:RDF>
```
:::

::: {.column}
```xml
<!-- Data -->
<?xml version="1.0"?>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
         xml:base="http://example.org/astronomy#">

  <!-- Instance of Star: the Sun -->
  <rdf:Description rdf:about="Sun">
    <rdf:type rdf:resource="Star"/>
    <rdfs:label>Sun</rdfs:label>
  </rdf:Description>

  <!-- Instance of Planet: Earth -->
  <rdf:Description rdf:about="Earth">
    <rdf:type rdf:resource="Planet"/>
    <rdfs:label>Earth</rdfs:label>
  </rdf:Description>

  <!-- Instance of Planet : Mars -->
  <rdf:Description rdf:about="Mars">
    <rdf:type rdf:resource="Planet"/>
    <rdfs:label>Mars</rdfs:label>
  </rdf:Description>

</rdf:RDF>
```
:::

::::

---

### Inférences

#### 1. Héritage du type premier

**Définition :** Toute classe est une ressource Web

**Implication :** Si $C$ est une classe, alors $C$ est également une sous-classe de `rdfs:Resource`

**Exemple :** `ex:Star` est une classe, alors `ex:Star` est également une sous-classe de `rdfs:Resource`

---

#### 2. Propagation des Types

**Définition :** Si une classe $A$ est une sous-classe d’une autre classe $B$, alors toute instance de $A$ est aussi une instance de $B$.

**Implication :** Si $A$ est une sous-classe de $B$ et que $x$ est une instance de $A$, alors $x$ est également une instance de $B$.

**Exemple :**  
SI `ex:Planet` est une sous-classe de `ex:CelestialBody`  
ET `ex:Earth` est une instance de `ex:Planet`  
ALORS `ex:Earth` est aussi une instance de `ex:CelestialBody`

---

#### 3. Réflexivité de la subsomption

**Définition :** Chaque classe est une sous-classe d’elle-même.

**Implication :** Si $C$ est une classe, alors $C \subseteq C$. Ainsi, pour toute instance $I$, il est vrai que $I \in C \Rightarrow C \subseteq C$.

**Exemple :**  
SI `ex:Planet` est une classe  
ALORS `ex:Planet` est une sous-classe de `ex:Planet`

::: {.notes}
Inférence triviale mais importante pour maintenir la cohérence des raisonnements.
:::
---

#### 4. Transitivité de la subsomption

**Définition :** Si une classe $A$ est une sous-classe de $B$, et que $B$ est une sous-classe de $C$, alors $A$ est aussi une sous-classe de $C$.

**Implication :** Si $A \subseteq B$ et $B \subseteq C \Rightarrow A \subseteq C$.

**Exemple :**  
SI `ex:RedDwarf` est une sous-classe de `ex:Star`  
ET `ex:Star` est une sous-classe de `ex:CelestialBody`  
ALORS `ex:RedDwarf` est aussi une sous-classe de `ex:CelestialBody`

## Définition de la hiérarchie des propriétés

Les propriétés répondent aux mêmes principes que les classes.

- Pour attribuer une classe au sujet et à l’objet d’un triplet ;
- les classes héritent des propriétés de leurs ancêtres ;
- essentielles pour inférer des relations :
  - `rdfs:domain` : classe des sujets
  - `rdfs:range` : classe des objets

:::: {.columns}

::: {.column}
```xml
<!-- Schema -->
<?xml version="1.0"?>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
         xml:base="http://example.org/astronomy#">

  <!-- Generic class -->
  <rdfs:Class rdf:about="CelestialBody">
    <rdfs:label>Celestial Body</rdfs:label>
  </rdfs:Class>

  <!-- Subclass Star -->
  <rdfs:Class rdf:about="Star">
    <rdfs:label>Star</rdfs:label>
    <rdfs:subClassOf rdf:resource="CelestialBody"/>
  </rdfs:Class>

  <!-- Subclass Planet -->
  <rdfs:Class rdf:about="Planet">
    <rdfs:label>Planet</rdfs:label>
    <rdfs:subClassOf rdf:resource="CelestialBody"/>
  </rdfs:Class>

  <!-- Property: orbits (a Planet orbits a Star) -->
  <rdf:Property rdf:about="orbits">
    <rdfs:label>orbits</rdfs:label>
    <rdfs:domain rdf:resource="Planet"/>
    <rdfs:range rdf:resource="Star"/>
  </rdf:Property>

  <!-- Property: hasMass (a Celestial Body has a mass with a numeric value) -->
  <rdf:Property rdf:about="hasMass">
    <rdfs:label>has mass</rdfs:label>
    <rdfs:domain rdf:resource="CelestialBody"/>
    <!-- Object is typed using XML Schema -->
    <rdfs:range rdf:resource="xsd:decimal"/>
  </rdf:Property>

</rdf:RDF>
```
:::

::: {.column}
```xml
<!-- Data -->
<?xml version="1.0"?>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
         xml:base="http://example.org/astronomy#">

  <!-- Instance of Star: the Sun -->
  <rdf:Description rdf:about="Sun">
    <rdf:type rdf:resource="Star"/>
    <rdfs:label>Sun</rdfs:label>
    <!-- Solar mass -->
    <hasMass rdf:resource="1.0"/>
  </rdf:Description>

  <!-- Instance of Planet: Earth -->
  <rdf:Description rdf:about="Earth">
    <rdf:type rdf:resource="Planet"/>
    <rdfs:label>Earth</rdfs:label>
    <!-- Terrestrial mass -->
    <hasMass rdf:resource="5.972"/>
    <orbits rdf:resource="Sun"/>
  </rdf:Description>

  <!-- Instance of Planet : Mars -->
  <rdf:Description rdf:about="Mars">
    <rdf:type rdf:resource="Planet"/>
    <rdfs:label>Mars</rdfs:label>
    <!-- Terrestrial mass -->
    <hasMass rdf:resource="0.641"/>
    <orbits rdf:resource="Sun"/>
  </rdf:Description>

</rdf:RDF>
```
:::

::::

---

Traduction en Turtle :

:::: {.columns}

::: {.column}
```txt
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ex: <http://example.org/astronomy#> .

# Generic class
ex:CelestialBody a rdfs:Class ;
    rdfs:label "Celestial Body" .

# Subclass Star
ex:Star a rdfs:Class ;
    rdfs:label "Star" ;
    rdfs:subClassOf ex:CelestialBody .

# Property: orbits (a Planet orbits a Star)
ex:orbits a rdf:Property ;
    rdfs:label "orbits" ;
    rdfs:domain ex:Planet ;
    rdfs:range ex:Star .

# Property: hasMass (a Celestial Body has a mass with a numeric value)
ex:hasMass a rdf:Property ;
    rdfs:label "has mass" ;
    rdfs:domain ex:CelestialBody ;
    rdfs:range xsd:decimal .

```
:::

::: {.column}
```txt
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ex: <http://example.org/astronomy#> .

# Instance of Star: the Sun
ex:Sun a ex:Star ;
    rdfs:label "Sun" ;
    ex:hasMass "1.0" .

# Instance of Planet: Earth
ex:Earth a ex:Planet ;
    rdfs:label "Earth" ;
    ex:hasMass "5.972" ;
    ex:orbits ex:Sun .

# Instance of Planet: Mars
ex:Mars a ex:Planet ;
    rdfs:label "Mars" ;
    ex:hasMass "0.641" ;
    ex:orbits ex:Sun .

```
:::

::::

---

### Inférences

#### 1. Propagation des types

**Définition :** Si une propriété $P_2$ est une sous-propriété d’une autre propriété $P_1$, alors tout sujet relié à un objet par la propriété $P_2$ lui est aussi relié par la propriété $P_1$.

**Implication :** Si $P_2$ est une sous-propriété de $P_1$ alors toute relation exprimée par $P_2$ implique automatiquement une relation similaire par $P_1$.

**Exemple :**  
SI `ex:hasApproximateMass` est une sous-propriété de `ex:hasMass`  
ET `ex:Earth` est lié à la valeur `5.972` par la propriété `ex:hasApproximateMass`  
ALORS `ex:Earth` est aussi lié à la valeur `5.972` par la propriété `ex:hasMass`

---

#### 2. Réflexivité de la subsomption

**Définition :** Chaque propriété est une sous-propriété d’elle-même.

**Implication :** Si $P$ est une propriété, alors $P \subseteq P$.

**Exemple :**  
SI `ex:orbits` est une propriété  
ALORS `ex:orbits` est une sous-propriété de `ex:orbits`

---

#### 3. Transitivité de la subsomption

**Définition :** Si une propriété $P_3$ est une sous-propriété de $P_2$, et que $P_2$ est une sous-propriété de $P_1$, alors $P_3$ est aussi une sous-propriété de $P_1$.

**Implication :** Si $P_3 \subseteq P_2$ et $P_2 \subseteq P_1 \Rightarrow P_3 \subseteq P_1$.

**Exemple :**  
SI `ex:radius` est une sous-propriété de `ex:physicalCharacteristics`  
ET `ex:polarRadius` est une sous-propriété de `ex:radius`  
ALORS `ex:polarRadius` est aussi une sous-propriété de `ex:physicalCharacteristics`

## Internationalisation

Les mécanismes de localisation reposent sur la propriété `rdfs:label` et l’attribut `xml:lang` :

:::: {.columns}

::: {.column width="50%"}
```xml
<?xml version="1.0"?>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
         xml:base="http://example.org/astronomy#">

  <!-- Generic class -->
  <rdfs:Class rdf:about="CelestialBody">
    <rdfs:label xml:lang="en">Celestial Body</rdfs:label>
    <rdfs:label xml:lang="fr">Corps Céleste</rdfs:label>
  </rdfs:Class>

  <!-- Subclass Star -->
  <rdfs:Class rdf:about="Star">
    <rdfs:label xml:lang="en">Star</rdfs:label>
    <rdfs:label xml:lang="fr">Étoile</rdfs:label>
    <rdfs:subClassOf rdf:resource="CelestialBody"/>
  </rdfs:Class>

  <!-- Subclass Planet -->
  <rdfs:Class rdf:about="Planet">
    <rdfs:label xml:lang="en">Planet</rdfs:label>
    <rdfs:label xml:lang="fr">Planète</rdfs:label>
    <rdfs:subClassOf rdf:resource="CelestialBody"/>
  </rdfs:Class>

  <!-- Property: orbits (a Planet orbits a Star) -->
  <rdf:Property rdf:about="orbits">
    <rdfs:label xml:lang="en">orbits</rdfs:label>
    <rdfs:label xml:lang="fr">orbite</rdfs:label>
    <rdfs:domain rdf:resource="Planet"/>
    <rdfs:range rdf:resource="Star"/>
  </rdf:Property>

  <!-- Property: hasMass (a Celestial Body has a mass with a numeric value) -->
  <rdf:Property rdf:about="hasMass">
    <rdfs:label xml:lang="en">has mass</rdfs:label>
    <rdfs:label xml:lang="fr">a une masse</rdfs:label>
    <rdfs:domain rdf:resource="CelestialBody"/>
    <rdfs:range rdf:resource="xsd:decimal"/>
  </rdf:Property>

</rdf:RDF>
```
:::

::: {.column width="50%"}
```txt
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@base <http://example.org/astronomy#> .

# Generic class
_:CelestialBody a rdfs:Class ;
    rdfs:label "Celestial Body"@en, "Corps Céleste"@fr .

# Subclass Star
_:Star a rdfs:Class ;
    rdfs:label "Star"@en, "Étoile"@fr ;
    rdfs:subClassOf _:CelestialBody .

# Subclass Planet
_:Planet a rdfs:Class ;
    rdfs:label "Planet"@en, "Planète"@fr ;
    rdfs:subClassOf _:CelestialBody .

# Property: orbits (a Planet orbits a Star)
_:orbits a rdf:Property ;
    rdfs:label "orbits"@en, "orbite"@fr ;
    rdfs:domain _:Planet ;
    rdfs:range _:Star .

# Property: hasMass (a Celestial Body has a mass with a numeric value)
_:hasMass a rdf:Property ;
    rdfs:label "has mass"@en, "a une masse"@fr ;
    rdfs:domain _:CelestialBody ;
    rdfs:range xsd:decimal .

```
:::

::::

---

## Autres propriétés

- Des commentaires en langue naturelle peuvent être intégrées dans une propriété `rdfs:comment` ;
- la propriété `rdfs:seeAlso` ajoute une relation non qualifiée (aucune inférence) entre deux classes.
